from flask import Flask, render_template, redirect, url_for, request, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_user, logout_user, login_required, UserMixin, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from models import db, User, BlogPost
from forms import RegistrationForm, LoginForm, PostForm

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secretkey'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite'

db.init_app(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def index():
    posts = BlogPost.query.all()
    return render_template('index.html', posts=posts)

# 註冊路由
@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = generate_password_hash(form.password.data)
        user = User(username=form.username.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        flash('註冊成功！請登入。')
        return redirect(url_for('login'))
    return render_template('register.html', form=form)

# 登入路由
@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and check_password_hash(user.password, form.password.data):
            login_user(user)
            return redirect(url_for('index'))
        flash('登入失敗！請檢查用戶名和密碼。')
    return render_template('login.html', form=form)

# 登出路由
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

# 新增文章
@app.route('/create', methods=['GET', 'POST'])
@login_required
def create():
    form = PostForm()
    if form.validate_on_submit():
        post = BlogPost(title=form.title.data, author=current_user.username, content=form.content.data)
        db.session.add(post)
        db.session.commit()
        return redirect(url_for('index'))
    return render_template('create.html', form=form)

# 顯示單篇文章
@app.route('/post/<int:post_id>')
def view(post_id):
    post = BlogPost.query.get_or_404(post_id)
    return render_template('view.html', post=post)

# 編輯文章
@app.route('/edit/<int:post_id>', methods=['GET', 'POST'])
@login_required
def edit(post_id):
    post = BlogPost.query.get_or_404(post_id)
    if post.author != current_user.username:
        return redirect(url_for('index'))
    form = PostForm(obj=post)
    if form.validate_on_submit():
        post.title = form.title.data
        post.content = form.content.data
        db.session.commit()
        return redirect(url_for('view', post_id=post.id))
    return render_template('edit.html', form=form)

# 刪除文章
@app.route('/delete/<int:post_id>', methods=['POST'])
@login_required
def delete(post_id):
    post = BlogPost.query.get_or_404(post_id)
    if post.author == current_user.username:
        db.session.delete(post)
        db.session.commit()
    return redirect(url_for('index'))

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
